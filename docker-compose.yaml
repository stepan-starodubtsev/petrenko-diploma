version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - app

  backend:
    build:
      context: ./monitoring_backend # Шлях до каталогу з Dockerfile бекенду
      dockerfile: Dockerfile
    container_name: monitoring_backend_app
    command: sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload" # Додаємо --reload для розробки
    volumes:
      - ./monitoring_backend/app:/app/app # Монтуємо код для живої перезавантаження Uvicorn
      - ./monitoring_backend/alembic:/app/alembic
      - ./monitoring_backend/alembic.ini:/app/alembic.ini
    ports:
      - "8000:8000" # Мапимо порт 8000 контейнера на порт 8000 хоста
    environment:
      - DATABASE_URL=${DATABASE_URL} # Передаємо змінні оточення з .env файлу хоста
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
    depends_on:
      db:
        condition: service_healthy # Чекаємо, поки БД буде готова
    networks:
      - monitoring_network

  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: monitoring_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app

networks:
  app:
    driver: bridge

volumes:
  postgres_data: